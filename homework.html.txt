<html lang="en" ><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><head><style  type=text/css>td{font-family:courier;font-size:18px}
p{line-height:23.0px;}</style></head><body  style="background-color:#ffffee;margin:5px 5px 0px 5px"><table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
30<br>
31<br>
32<br>
33<br>
34<br>
35<br>
36<br>
37<br>
38<br>
39<br>
40<br>
41<br>
42<br>
43<br>
44<br>
45<br>
</p></td><td  align=left valign=top><p><nobr><font color=green>//&nbsp;Add&nbsp;'-&gt;'&nbsp;to&nbsp;the&nbsp;list&nbsp;of&nbsp;multi-character&nbsp;operators</nobr><br>
<nobr></font>this.dd = <font color=red>"[],(),{},&lt;=,&gt;=,+=,++,--,===,!==,==,-=,*=,/=,%=,||,&&,&=,|=,!=,&lt;&lt;,&gt;&gt;,-&gt;"</font>.split(/,/);</nobr><br>
<nobr></nobr><br>
<nobr>this.nextToken = function()</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (this.buf.length == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>let a = this.nextToken0();</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (a == null)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (this.state == this.ERROR)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>alert(<font color=red>"Syntax&nbsp;error&nbsp;found&nbsp;in&nbsp;line&nbsp;"</font>+ this.linenum);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b> null;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (a.type != <font color=red>"operator"</font>|| a.token.length == 1) <b>return</b> a;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.buf = (a.token);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>for</b> (let i = 0; i &lt; this.dd.length; i++)</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>if</b> (this.buf == (this.dd[i]))</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.buf = <font color=red>""</font>;</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>token: this.dd[i], type: <font color=red>"operator"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>else</b> <b>if</b> (this.buf.toString().indexOf(this.dd[i]) == 0)</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>this.buf = this.buf.substring(this.dd[i].length);</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr><b>return</b></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>token: this.dd[i], type: <font color=red>"operator"</font></nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>}</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>let ans = this.buf.charAt(0);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>this.buf = this.buf.substring(1);</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>return</b></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<nobr>token: ans, type: <font color=red>"operator"</font></nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>};</nobr><br>
<nobr>};</nobr><br>
</p></td></tr></table>
<table align=left><tr><td  align=right style=color:teal valign=top><p>1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9<br>
10<br>
11<br>
12<br>
13<br>
14<br>
15<br>
16<br>
17<br>
18<br>
19<br>
20<br>
21<br>
22<br>
23<br>
24<br>
25<br>
26<br>
27<br>
28<br>
29<br>
</p></td><td  align=left valign=top><p><nobr>PythonFunction func = <b>new</b> PythonFunction();</nobr><br>
<nobr><b>int</b> defIndex = text.indexOf(<font color=red>"def&nbsp;"</font>);</nobr><br>
<nobr><b>if</b> (defIndex != 0)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>func.errorCode = PythonFunction.INCORRECTFORMAT;return func;</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>int</b> nameStart = defIndex + 4;</nobr><br>
<nobr><b>int</b> nameEnd = text.indexOf(<font color=#FF00CC>'('</font>, nameStart);</nobr><br>
<nobr><b>if</b> (nameEnd == -1 || !isValidFuncName(text.substring(nameStart, nameEnd).trim()))</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>func.errorCode = PythonFunction.INVALIDFUNCNAME;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>return</b> func;</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr><b>int</b> argsEnd = text.indexOf(<font color=#FF00CC>')'</font>, nameEnd);</nobr><br>
<nobr><b>if</b> (argsEnd == -1 || text.charAt(argsEnd + 1) != <font color=#FF00CC>':'</font>)</nobr><br>
<nobr>{</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr>func.errorCode = PythonFunction.INCORRECTFORMAT;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr><b>return</b> func;</nobr><br>
<nobr>}</nobr><br>
<nobr></nobr><br>
<nobr>func.name = text.substring(nameStart, nameEnd).trim();</nobr><br>
<nobr>func.args = text.substring(nameEnd + 1, argsEnd).trim();</nobr><br>
<nobr>func.body = text.substring(argsEnd + 2).trim();</nobr><br>
<nobr></nobr><br>
<nobr><b>if</b> (func.body.isEmpty()) func.errorCode = PythonFunction.NODEFINITION;</nobr><br>
&nbsp;&nbsp;&nbsp;<nobr></nobr><br>
<nobr><b>return</b> func;</nobr><br>
</p></td></tr></table></center></body>